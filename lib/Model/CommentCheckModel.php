<?php
/**
 * CommentCheckModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SiapepFranceAskimet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Akismet API
 *
 * Documentation of the Akismet API
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SiapepFranceAskimet\Client\Model;

use \ArrayAccess;
use \SiapepFranceAskimet\Client\ObjectSerializer;

/**
 * CommentCheckModel Class Doc Comment
 *
 * @category Class
 * @package  SiapepFranceAskimet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommentCheckModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommentCheckModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'blog' => 'string',
        'user_ip' => 'string',
        'user_agent' => 'string',
        'referrer' => 'string',
        'permalink' => 'string',
        'comment_type' => 'string',
        'comment_author' => 'string',
        'comment_author_email' => 'string',
        'comment_author_url' => 'string',
        'comment_content' => 'string',
        'comment_date_gmt' => 'string',
        'comment_post_modified_gmt' => 'string',
        'blog_lang' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'blog' => null,
        'user_ip' => null,
        'user_agent' => null,
        'referrer' => null,
        'permalink' => null,
        'comment_type' => null,
        'comment_author' => null,
        'comment_author_email' => null,
        'comment_author_url' => null,
        'comment_content' => null,
        'comment_date_gmt' => null,
        'comment_post_modified_gmt' => null,
        'blog_lang' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
		'blog' => false,
		'user_ip' => false,
		'user_agent' => false,
		'referrer' => false,
		'permalink' => false,
		'comment_type' => false,
		'comment_author' => false,
		'comment_author_email' => false,
		'comment_author_url' => false,
		'comment_content' => false,
		'comment_date_gmt' => false,
		'comment_post_modified_gmt' => false,
		'blog_lang' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'api_key',
        'blog' => 'blog',
        'user_ip' => 'user_ip',
        'user_agent' => 'user_agent',
        'referrer' => 'referrer',
        'permalink' => 'permalink',
        'comment_type' => 'comment_type',
        'comment_author' => 'comment_author',
        'comment_author_email' => 'comment_author_email',
        'comment_author_url' => 'comment_author_url',
        'comment_content' => 'comment_content',
        'comment_date_gmt' => 'comment_date_gmt',
        'comment_post_modified_gmt' => 'comment_post_modified_gmt',
        'blog_lang' => 'blog_lang'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'blog' => 'setBlog',
        'user_ip' => 'setUserIp',
        'user_agent' => 'setUserAgent',
        'referrer' => 'setReferrer',
        'permalink' => 'setPermalink',
        'comment_type' => 'setCommentType',
        'comment_author' => 'setCommentAuthor',
        'comment_author_email' => 'setCommentAuthorEmail',
        'comment_author_url' => 'setCommentAuthorUrl',
        'comment_content' => 'setCommentContent',
        'comment_date_gmt' => 'setCommentDateGmt',
        'comment_post_modified_gmt' => 'setCommentPostModifiedGmt',
        'blog_lang' => 'setBlogLang'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'blog' => 'getBlog',
        'user_ip' => 'getUserIp',
        'user_agent' => 'getUserAgent',
        'referrer' => 'getReferrer',
        'permalink' => 'getPermalink',
        'comment_type' => 'getCommentType',
        'comment_author' => 'getCommentAuthor',
        'comment_author_email' => 'getCommentAuthorEmail',
        'comment_author_url' => 'getCommentAuthorUrl',
        'comment_content' => 'getCommentContent',
        'comment_date_gmt' => 'getCommentDateGmt',
        'comment_post_modified_gmt' => 'getCommentPostModifiedGmt',
        'blog_lang' => 'getBlogLang'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('blog', $data ?? [], null);
        $this->setIfExists('user_ip', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('permalink', $data ?? [], null);
        $this->setIfExists('comment_type', $data ?? [], null);
        $this->setIfExists('comment_author', $data ?? [], null);
        $this->setIfExists('comment_author_email', $data ?? [], null);
        $this->setIfExists('comment_author_url', $data ?? [], null);
        $this->setIfExists('comment_content', $data ?? [], null);
        $this->setIfExists('comment_date_gmt', $data ?? [], null);
        $this->setIfExists('comment_post_modified_gmt', $data ?? [], null);
        $this->setIfExists('blog_lang', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string|null
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string|null $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets blog
     *
     * @return string|null
     */
    public function getBlog()
    {
        return $this->container['blog'];
    }

    /**
     * Sets blog
     *
     * @param string|null $blog blog
     *
     * @return self
     */
    public function setBlog($blog)
    {
        if (is_null($blog)) {
            throw new \InvalidArgumentException('non-nullable blog cannot be null');
        }
        $this->container['blog'] = $blog;

        return $this;
    }

    /**
     * Gets user_ip
     *
     * @return string|null
     */
    public function getUserIp()
    {
        return $this->container['user_ip'];
    }

    /**
     * Sets user_ip
     *
     * @param string|null $user_ip user_ip
     *
     * @return self
     */
    public function setUserIp($user_ip)
    {
        if (is_null($user_ip)) {
            throw new \InvalidArgumentException('non-nullable user_ip cannot be null');
        }
        $this->container['user_ip'] = $user_ip;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string|null $referrer referrer
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        if (is_null($referrer)) {
            throw new \InvalidArgumentException('non-nullable referrer cannot be null');
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets permalink
     *
     * @return string|null
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     *
     * @param string|null $permalink permalink
     *
     * @return self
     */
    public function setPermalink($permalink)
    {
        if (is_null($permalink)) {
            throw new \InvalidArgumentException('non-nullable permalink cannot be null');
        }
        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets comment_type
     *
     * @return string|null
     */
    public function getCommentType()
    {
        return $this->container['comment_type'];
    }

    /**
     * Sets comment_type
     *
     * @param string|null $comment_type comment_type
     *
     * @return self
     */
    public function setCommentType($comment_type)
    {
        if (is_null($comment_type)) {
            throw new \InvalidArgumentException('non-nullable comment_type cannot be null');
        }
        $this->container['comment_type'] = $comment_type;

        return $this;
    }

    /**
     * Gets comment_author
     *
     * @return string|null
     */
    public function getCommentAuthor()
    {
        return $this->container['comment_author'];
    }

    /**
     * Sets comment_author
     *
     * @param string|null $comment_author comment_author
     *
     * @return self
     */
    public function setCommentAuthor($comment_author)
    {
        if (is_null($comment_author)) {
            throw new \InvalidArgumentException('non-nullable comment_author cannot be null');
        }
        $this->container['comment_author'] = $comment_author;

        return $this;
    }

    /**
     * Gets comment_author_email
     *
     * @return string|null
     */
    public function getCommentAuthorEmail()
    {
        return $this->container['comment_author_email'];
    }

    /**
     * Sets comment_author_email
     *
     * @param string|null $comment_author_email comment_author_email
     *
     * @return self
     */
    public function setCommentAuthorEmail($comment_author_email)
    {
        if (is_null($comment_author_email)) {
            throw new \InvalidArgumentException('non-nullable comment_author_email cannot be null');
        }
        $this->container['comment_author_email'] = $comment_author_email;

        return $this;
    }

    /**
     * Gets comment_author_url
     *
     * @return string|null
     */
    public function getCommentAuthorUrl()
    {
        return $this->container['comment_author_url'];
    }

    /**
     * Sets comment_author_url
     *
     * @param string|null $comment_author_url comment_author_url
     *
     * @return self
     */
    public function setCommentAuthorUrl($comment_author_url)
    {
        if (is_null($comment_author_url)) {
            throw new \InvalidArgumentException('non-nullable comment_author_url cannot be null');
        }
        $this->container['comment_author_url'] = $comment_author_url;

        return $this;
    }

    /**
     * Gets comment_content
     *
     * @return string|null
     */
    public function getCommentContent()
    {
        return $this->container['comment_content'];
    }

    /**
     * Sets comment_content
     *
     * @param string|null $comment_content comment_content
     *
     * @return self
     */
    public function setCommentContent($comment_content)
    {
        if (is_null($comment_content)) {
            throw new \InvalidArgumentException('non-nullable comment_content cannot be null');
        }
        $this->container['comment_content'] = $comment_content;

        return $this;
    }

    /**
     * Gets comment_date_gmt
     *
     * @return string|null
     */
    public function getCommentDateGmt()
    {
        return $this->container['comment_date_gmt'];
    }

    /**
     * Sets comment_date_gmt
     *
     * @param string|null $comment_date_gmt comment_date_gmt
     *
     * @return self
     */
    public function setCommentDateGmt($comment_date_gmt)
    {
        if (is_null($comment_date_gmt)) {
            throw new \InvalidArgumentException('non-nullable comment_date_gmt cannot be null');
        }
        $this->container['comment_date_gmt'] = $comment_date_gmt;

        return $this;
    }

    /**
     * Gets comment_post_modified_gmt
     *
     * @return string|null
     */
    public function getCommentPostModifiedGmt()
    {
        return $this->container['comment_post_modified_gmt'];
    }

    /**
     * Sets comment_post_modified_gmt
     *
     * @param string|null $comment_post_modified_gmt comment_post_modified_gmt
     *
     * @return self
     */
    public function setCommentPostModifiedGmt($comment_post_modified_gmt)
    {
        if (is_null($comment_post_modified_gmt)) {
            throw new \InvalidArgumentException('non-nullable comment_post_modified_gmt cannot be null');
        }
        $this->container['comment_post_modified_gmt'] = $comment_post_modified_gmt;

        return $this;
    }

    /**
     * Gets blog_lang
     *
     * @return string|null
     */
    public function getBlogLang()
    {
        return $this->container['blog_lang'];
    }

    /**
     * Sets blog_lang
     *
     * @param string|null $blog_lang blog_lang
     *
     * @return self
     */
    public function setBlogLang($blog_lang)
    {
        if (is_null($blog_lang)) {
            throw new \InvalidArgumentException('non-nullable blog_lang cannot be null');
        }
        $this->container['blog_lang'] = $blog_lang;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


