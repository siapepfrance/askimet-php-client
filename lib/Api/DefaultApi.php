<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SiapepFranceAskimet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Akismet API
 *
 * Documentation of the Akismet API
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SiapepFranceAskimet\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SiapepFranceAskimet\Client\ApiException;
use SiapepFranceAskimet\Client\Configuration;
use SiapepFranceAskimet\Client\HeaderSelector;
use SiapepFranceAskimet\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  SiapepFranceAskimet\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'call1CommentCheckPost' => [
            'application/json',
        ],
        'call1SubmitHamPost' => [
            'application/json',
        ],
        'call1SubmitSpamPost' => [
            'application/json',
        ],
        'call1VerifyKeyPost' => [
            'application/json',
        ],
        'call2KeySitesPost' => [
            'application/json',
        ],
        'call2UsageLimitPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation call1CommentCheckPost
     *
     * Verify a comment against Akismet
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1CommentCheckPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call1CommentCheckPost($comment_check_model, string $contentType = self::contentTypes['call1CommentCheckPost'][0])
    {
        $this->call1CommentCheckPostWithHttpInfo($comment_check_model, $contentType);
    }

    /**
     * Operation call1CommentCheckPostWithHttpInfo
     *
     * Verify a comment against Akismet
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1CommentCheckPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call1CommentCheckPostWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1CommentCheckPost'][0])
    {
        $request = $this->call1CommentCheckPostRequest($comment_check_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call1CommentCheckPostAsync
     *
     * Verify a comment against Akismet
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1CommentCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1CommentCheckPostAsync($comment_check_model, string $contentType = self::contentTypes['call1CommentCheckPost'][0])
    {
        return $this->call1CommentCheckPostAsyncWithHttpInfo($comment_check_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call1CommentCheckPostAsyncWithHttpInfo
     *
     * Verify a comment against Akismet
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1CommentCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1CommentCheckPostAsyncWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1CommentCheckPost'][0])
    {
        $returnType = '';
        $request = $this->call1CommentCheckPostRequest($comment_check_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call1CommentCheckPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1CommentCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call1CommentCheckPostRequest($comment_check_model, string $contentType = self::contentTypes['call1CommentCheckPost'][0])
    {

        // verify the required parameter 'comment_check_model' is set
        if ($comment_check_model === null || (is_array($comment_check_model) && count($comment_check_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_check_model when calling call1CommentCheckPost'
            );
        }


        $resourcePath = '/1.1/comment-check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($comment_check_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($comment_check_model));
            } else {
                $httpBody = $comment_check_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call1SubmitHamPost
     *
     * Submit a comment identified as legitimate
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitHamPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call1SubmitHamPost($comment_check_model, string $contentType = self::contentTypes['call1SubmitHamPost'][0])
    {
        $this->call1SubmitHamPostWithHttpInfo($comment_check_model, $contentType);
    }

    /**
     * Operation call1SubmitHamPostWithHttpInfo
     *
     * Submit a comment identified as legitimate
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitHamPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call1SubmitHamPostWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1SubmitHamPost'][0])
    {
        $request = $this->call1SubmitHamPostRequest($comment_check_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call1SubmitHamPostAsync
     *
     * Submit a comment identified as legitimate
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitHamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1SubmitHamPostAsync($comment_check_model, string $contentType = self::contentTypes['call1SubmitHamPost'][0])
    {
        return $this->call1SubmitHamPostAsyncWithHttpInfo($comment_check_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call1SubmitHamPostAsyncWithHttpInfo
     *
     * Submit a comment identified as legitimate
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitHamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1SubmitHamPostAsyncWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1SubmitHamPost'][0])
    {
        $returnType = '';
        $request = $this->call1SubmitHamPostRequest($comment_check_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call1SubmitHamPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitHamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call1SubmitHamPostRequest($comment_check_model, string $contentType = self::contentTypes['call1SubmitHamPost'][0])
    {

        // verify the required parameter 'comment_check_model' is set
        if ($comment_check_model === null || (is_array($comment_check_model) && count($comment_check_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_check_model when calling call1SubmitHamPost'
            );
        }


        $resourcePath = '/1.1/submit-ham';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($comment_check_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($comment_check_model));
            } else {
                $httpBody = $comment_check_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call1SubmitSpamPost
     *
     * Submit a comment identified as spam
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitSpamPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call1SubmitSpamPost($comment_check_model, string $contentType = self::contentTypes['call1SubmitSpamPost'][0])
    {
        $this->call1SubmitSpamPostWithHttpInfo($comment_check_model, $contentType);
    }

    /**
     * Operation call1SubmitSpamPostWithHttpInfo
     *
     * Submit a comment identified as spam
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitSpamPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call1SubmitSpamPostWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1SubmitSpamPost'][0])
    {
        $request = $this->call1SubmitSpamPostRequest($comment_check_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call1SubmitSpamPostAsync
     *
     * Submit a comment identified as spam
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitSpamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1SubmitSpamPostAsync($comment_check_model, string $contentType = self::contentTypes['call1SubmitSpamPost'][0])
    {
        return $this->call1SubmitSpamPostAsyncWithHttpInfo($comment_check_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call1SubmitSpamPostAsyncWithHttpInfo
     *
     * Submit a comment identified as spam
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitSpamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1SubmitSpamPostAsyncWithHttpInfo($comment_check_model, string $contentType = self::contentTypes['call1SubmitSpamPost'][0])
    {
        $returnType = '';
        $request = $this->call1SubmitSpamPostRequest($comment_check_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call1SubmitSpamPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\CommentCheckModel $comment_check_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1SubmitSpamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call1SubmitSpamPostRequest($comment_check_model, string $contentType = self::contentTypes['call1SubmitSpamPost'][0])
    {

        // verify the required parameter 'comment_check_model' is set
        if ($comment_check_model === null || (is_array($comment_check_model) && count($comment_check_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_check_model when calling call1SubmitSpamPost'
            );
        }


        $resourcePath = '/1.1/submit-spam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($comment_check_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($comment_check_model));
            } else {
                $httpBody = $comment_check_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call1VerifyKeyPost
     *
     * Verify the validity of an Akismet API key
     *
     * @param  \SiapepFranceAskimet\Client\Model\VerifyKeyModel $verify_key_model verify_key_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1VerifyKeyPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call1VerifyKeyPost($verify_key_model, string $contentType = self::contentTypes['call1VerifyKeyPost'][0])
    {
        $this->call1VerifyKeyPostWithHttpInfo($verify_key_model, $contentType);
    }

    /**
     * Operation call1VerifyKeyPostWithHttpInfo
     *
     * Verify the validity of an Akismet API key
     *
     * @param  \SiapepFranceAskimet\Client\Model\VerifyKeyModel $verify_key_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1VerifyKeyPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call1VerifyKeyPostWithHttpInfo($verify_key_model, string $contentType = self::contentTypes['call1VerifyKeyPost'][0])
    {
        $request = $this->call1VerifyKeyPostRequest($verify_key_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call1VerifyKeyPostAsync
     *
     * Verify the validity of an Akismet API key
     *
     * @param  \SiapepFranceAskimet\Client\Model\VerifyKeyModel $verify_key_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1VerifyKeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1VerifyKeyPostAsync($verify_key_model, string $contentType = self::contentTypes['call1VerifyKeyPost'][0])
    {
        return $this->call1VerifyKeyPostAsyncWithHttpInfo($verify_key_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call1VerifyKeyPostAsyncWithHttpInfo
     *
     * Verify the validity of an Akismet API key
     *
     * @param  \SiapepFranceAskimet\Client\Model\VerifyKeyModel $verify_key_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1VerifyKeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call1VerifyKeyPostAsyncWithHttpInfo($verify_key_model, string $contentType = self::contentTypes['call1VerifyKeyPost'][0])
    {
        $returnType = '';
        $request = $this->call1VerifyKeyPostRequest($verify_key_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call1VerifyKeyPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\VerifyKeyModel $verify_key_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call1VerifyKeyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call1VerifyKeyPostRequest($verify_key_model, string $contentType = self::contentTypes['call1VerifyKeyPost'][0])
    {

        // verify the required parameter 'verify_key_model' is set
        if ($verify_key_model === null || (is_array($verify_key_model) && count($verify_key_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_key_model when calling call1VerifyKeyPost'
            );
        }


        $resourcePath = '/1.1/verify-key';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($verify_key_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($verify_key_model));
            } else {
                $httpBody = $verify_key_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call2KeySitesPost
     *
     * Get a list of sites associated with an Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\KeySitesModel $key_sites_model key_sites_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2KeySitesPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call2KeySitesPost($key_sites_model, string $contentType = self::contentTypes['call2KeySitesPost'][0])
    {
        $this->call2KeySitesPostWithHttpInfo($key_sites_model, $contentType);
    }

    /**
     * Operation call2KeySitesPostWithHttpInfo
     *
     * Get a list of sites associated with an Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\KeySitesModel $key_sites_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2KeySitesPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call2KeySitesPostWithHttpInfo($key_sites_model, string $contentType = self::contentTypes['call2KeySitesPost'][0])
    {
        $request = $this->call2KeySitesPostRequest($key_sites_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call2KeySitesPostAsync
     *
     * Get a list of sites associated with an Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\KeySitesModel $key_sites_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2KeySitesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2KeySitesPostAsync($key_sites_model, string $contentType = self::contentTypes['call2KeySitesPost'][0])
    {
        return $this->call2KeySitesPostAsyncWithHttpInfo($key_sites_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call2KeySitesPostAsyncWithHttpInfo
     *
     * Get a list of sites associated with an Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\KeySitesModel $key_sites_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2KeySitesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2KeySitesPostAsyncWithHttpInfo($key_sites_model, string $contentType = self::contentTypes['call2KeySitesPost'][0])
    {
        $returnType = '';
        $request = $this->call2KeySitesPostRequest($key_sites_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call2KeySitesPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\KeySitesModel $key_sites_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2KeySitesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call2KeySitesPostRequest($key_sites_model, string $contentType = self::contentTypes['call2KeySitesPost'][0])
    {

        // verify the required parameter 'key_sites_model' is set
        if ($key_sites_model === null || (is_array($key_sites_model) && count($key_sites_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key_sites_model when calling call2KeySitesPost'
            );
        }


        $resourcePath = '/1.2/key-sites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($key_sites_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($key_sites_model));
            } else {
                $httpBody = $key_sites_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call2UsageLimitPost
     *
     * Get usage limits of the Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\UsageLimitModel $usage_limit_model usage_limit_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2UsageLimitPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function call2UsageLimitPost($usage_limit_model, string $contentType = self::contentTypes['call2UsageLimitPost'][0])
    {
        $this->call2UsageLimitPostWithHttpInfo($usage_limit_model, $contentType);
    }

    /**
     * Operation call2UsageLimitPostWithHttpInfo
     *
     * Get usage limits of the Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\UsageLimitModel $usage_limit_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2UsageLimitPost'] to see the possible values for this operation
     *
     * @throws \SiapepFranceAskimet\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function call2UsageLimitPostWithHttpInfo($usage_limit_model, string $contentType = self::contentTypes['call2UsageLimitPost'][0])
    {
        $request = $this->call2UsageLimitPostRequest($usage_limit_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation call2UsageLimitPostAsync
     *
     * Get usage limits of the Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\UsageLimitModel $usage_limit_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2UsageLimitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2UsageLimitPostAsync($usage_limit_model, string $contentType = self::contentTypes['call2UsageLimitPost'][0])
    {
        return $this->call2UsageLimitPostAsyncWithHttpInfo($usage_limit_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call2UsageLimitPostAsyncWithHttpInfo
     *
     * Get usage limits of the Akismet key
     *
     * @param  \SiapepFranceAskimet\Client\Model\UsageLimitModel $usage_limit_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2UsageLimitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call2UsageLimitPostAsyncWithHttpInfo($usage_limit_model, string $contentType = self::contentTypes['call2UsageLimitPost'][0])
    {
        $returnType = '';
        $request = $this->call2UsageLimitPostRequest($usage_limit_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call2UsageLimitPost'
     *
     * @param  \SiapepFranceAskimet\Client\Model\UsageLimitModel $usage_limit_model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call2UsageLimitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call2UsageLimitPostRequest($usage_limit_model, string $contentType = self::contentTypes['call2UsageLimitPost'][0])
    {

        // verify the required parameter 'usage_limit_model' is set
        if ($usage_limit_model === null || (is_array($usage_limit_model) && count($usage_limit_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usage_limit_model when calling call2UsageLimitPost'
            );
        }


        $resourcePath = '/1.2/usage-limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($usage_limit_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($usage_limit_model));
            } else {
                $httpBody = $usage_limit_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
